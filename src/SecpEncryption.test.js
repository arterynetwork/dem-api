const enc = require("./SecpEncryption");

const _ = require('lodash');
const BN = require("bn.js");
const EC = require("elliptic").ec;

const {PrivateKey, PublicKey} = require("bitcore-lib");

describe('Transformations Symmetry or There and Back Again', () => {
    const ec = new EC("secp256k1").curve;
    const privKey = PrivateKey.fromString('c3395e81bb284c719accb8dfcc4211cb605ef74fb968ca7dc929cca5cff7ca26');
    const pubKey = PublicKey.fromString('02131d226feae331244e8fc522bb289cb97f0cd6866330e89e5e2eef03d69db265');

    test('Layer 1: An object to big numbers', () => {
        const testData ="{'message': 'Here we go', 'attachedMessage': '', 'resendMessage': '', 'sender': 'artr1gf2nppgs5yvvjfx2uey7450pu54x79dsdz7vh3', 'recepient': 'artr1gf2nppgs5yvvjfx2uey7450pu54x79dsdz7vh3', 'shaID': 'some-digits-here','fromUser': 1}";
        const there = enc.steps.objToNumbers(testData);
        const back = enc.steps.numbersToObj(there);
        expect(back).toEqual(testData);
    });

    test.each([
        {
            case: 'a message',
            data: [
                new BN('01010e227b5c6e20202020276d657373616765273a2027486572652077652067', 16),
                new BN('6f272c5c6e202020202761747461636865644d657373616765273a2027272c5c', 16),
                new BN('6e2020202027726573656e644d657373616765273a2027272c5c6e2020202027', 16),
                new BN('73656e646572273a202761727472316766326e70706773357976766a66783275', 16),
                new BN('657937343530707535347837396473647a37766833272c5c6e20202020277265', 16),
                new BN('63657069656e74273a202761727472316766326e70706773357976766a667832', 16),
                new BN('75657937343530707535347837396473647a37766833272c5c6e202020202773', 16),
                new BN('68614944273a2027736f6d652d6469676974732d68657265272c5c6e20202020', 16),
                new BN('2766726f6d55736572273a20315c6e7d22767da690cf601d153b1e560f6c1a94', 16),
            ],
        },
        {
            case: 'a special point',
            data: [
                new BN('3B8BC178283B0801287F9D2A8AC016B9DFFC7AC245EA04C09E6C33C3B4F5A421', 16),
            ]
        }
    ])('Layer 2: Big numbers to curve points ($case)', ({data}) => {
        const there = enc.steps.numbersToRawPoints(data);
        const back = enc.steps.rawPointsToNumbers(there);
        expect(back.length).toEqual(data.length);
        _.forEach(
            _.zip(back, data),
            pair => {
                const [actual, expected] = pair;
                expect(actual.toString()).toEqual(expected.toString());
            }
        );
    });

    test('Layer 3: Transform curve points', () => {
        const testData = [
            ec.point(
                new BN('30092306940169112432727081005603551911369161731527605859873965648575921261168', 10),
                new BN('52643133340401914516384882562227155928228786314711624904444804375619805996412', 10),
            ),
            ec.point(
                new BN('56772156215815246076055628164834602596866052219349116834245437365976605708', 10),
                new BN('97966660880691410730790271558030918969465737659510416818508419823826571557481', 10),
            ),
            ec.point(
                new BN('33924621779903842732859115085362123253619473436262065166327830598369037402332', 10),
                new BN('26098952447059234714940929403016438042770487821007189212890711186889180452310', 10),
            ),
            ec.point(
                new BN('6284492424627605750578897533055669717408925188578101003924966133260521629067', 10),
                new BN('61862545846336255500963184006460688749312037611054095279002047506371546627449', 10),
            ),
            ec.point(
                new BN('30092306940169112432727081005603551911369161731527605859873965648575921261168', 10),
                new BN('52643133340401914516384882562227155928228786314711624904444804375619805996412', 10),
            ),
            ec.point(
                new BN('77622685039240840234141604906792502229032052087236981817848840501408946604638', 10),
                new BN('8308901594903418977943452043103139702479631212297891637123611802720300076332', 10),
            ),
            ec.point(
                new BN('105181253608806814769690378822282275856730961837698056570049270914056557675013', 10),
                new BN('4709256775826008202037623530764257011778016670691675125638241646875326586741', 10),
            ),
            ec.point(
                new BN('389149798220467363258246359300313033828587970631793646826664203868876849216', 10),
                new BN('165427546966565080043119599988734897113115772514538543628531966636193293188', 10),
            ),
            ec.point(
                new BN('26097595519697283265576377687560556490952289940768195599097705082173265811770', 10),
                new BN('35816445956376762053916883309586044819568000080463579388512537901790126665149', 10),
            ),
            ec.point(
                new BN('77622685039240840234141604906792502229032052087236981817848840501408946604638', 10),
                new BN('8308901594903418977943452043103139702479631212297891637123611802720300076332', 10),
            ),
            ec.point(
                new BN('5737220900664483516041840579113332320351673756513196558803418506249883676236', 10),
                new BN('94338549691104146937096408816550699834658376902294399604353410536126302210313', 10),
            ),
            ec.point(
                new BN('105181253608806814769690378822282275856730961837698056570049270914056557675013', 10),
                new BN('4709256775826008202037623530764257011778016670691675125638241646875326586741', 10),
            ),
            ec.point(
                new BN('33924621779903842732859115085362123253619473436262065166327830598369037402332', 10),
                new BN('26098952447059234714940929403016438042770487821007189212890711186889180452310', 10),
            ),
            ec.point(
                new BN('30092306940169112432727081005603551911369161731527605859873965648575921261168', 10),
                new BN('52643133340401914516384882562227155928228786314711624904444804375619805996412', 10),
            ),
            ec.point(
                new BN('351235932815259448008627518529335314515204411096210646831185097761542687984', 10),
                new BN('40488678317756216706750484040069519561794433508784951040401746600588120704512', 10),
            ),
            ec.point(
                new BN('30092306940169112432727081005603551911369161731527605859873965648575921261168', 10),
                new BN('52643133340401914516384882562227155928228786314711624904444804375619805996412', 10),
            ),
            ec.point(
                new BN('6637486429673491568694404282543648377634473435513697053265119471179607049454', 10),
                new BN('17467473321181749581897740472994587871300239524678439323814406871281981202266', 10),
            ),
            ec.point(
                new BN('23606213041416993804502508720553202481634366359530844384242697189474211729424', 10),
                new BN('78473309552256222461260617563980060267676319986961412156878315930983687189298', 10),
            ),
            ec.point(
                new BN('8910604649253295362273563235475880091627922603036661012385612840412814642506', 10),
                new BN('68804639969537672055767033455221873491927403962421074147286515796811492001130', 10),
            ),
        ];

        const there = enc.steps.encryptPoints(pubKey, testData);
        const back = enc.steps.decryptPoints(privKey, there);

        expect(back.length).toEqual(testData.length);
        _.forEach(
            _.zip(back, testData),
            pair => {
                const [actual, expected] = pair;
                expect(actual.getX()).toEqual(expected.getX());
                expect(actual.getY()).toEqual(expected.getY());
            }
        );
    });

    test.each([
        {
            case: 'encrypted',
            data: [
                ec.point( // 1
                    new BN('26838036379641624471722624288272916314709079812334638998876575380999511127393', 10),
                    new BN('32749959799081867363630234130170807009938706979625466307079975879756196691256', 10),
                ),
                ec.point( // 2
                    new BN('71362737161104207059017095138570814691750514680088891190342554299373440389648', 10),
                    new BN('26987050350562434765388147053938941598193893288323933033995287417688970419007', 10),
                ),
                ec.point( // 3
                    new BN('97974708114114079446845505725131416460565832024522363749208153045749496849258', 10),
                    new BN('108208572726896676780546880493331805129099746598236117404859140740259882585198', 10),
                ),
                ec.point( // 4
                    new BN('93432529917424668222928221404536694810603297745777471489028353079347405861445', 10),
                    new BN('9362527584244171224146343491035595274624818606265561687487186533379238561673', 10),
                ),
                ec.point( // 5
                    new BN('107668543457375711763603479482155046626039611768321695204849850906405114557140', 10),
                    new BN('103838306240238214414044470082908718175212114358817358727933305320250530596556', 10),
                ),
                ec.point( // 6
                    new BN('71362737161104207059017095138570814691750514680088891190342554299373440389648', 10),
                    new BN('26987050350562434765388147053938941598193893288323933033995287417688970419007', 10),
                ),
                ec.point( // 7
                    new BN('88259977521153689805997778324390304134158897353451904282142039500885453611306', 10),
                    new BN('32441196336524673965497219284401917340206225139725550674761945623913204562961', 10),
                ),
                ec.point( // 8
                    new BN('43311438834212862187500559936376661121902598127232879413008819529023335905886', 10),
                    new BN('41350302337250006939627689924406448975530316247971453838164008940648008457894', 10),
                ),
                ec.point( // 9
                    new BN('98122576033717517299997114028800709898912613833695141401782618000967997242735', 10),
                    new BN('47293883343295813569165474733203310384940553753530803059621213724184135380417', 10),
                ),
                ec.point( // 10
                    new BN('62407355983693060480355515956591940140084421817948140168619185402065860676454', 10),
                    new BN('8305240651977128926010755365593377516557104314598153211447490413873117997918', 10),
                ),
                ec.point( // 11
                    new BN('88259977521153689805997778324390304134158897353451904282142039500885453611306', 10),
                    new BN('32441196336524673965497219284401917340206225139725550674761945623913204562961', 10),
                ),
                ec.point( // 12
                    new BN('51695694519354425748122605789012816615898348258803068187955905271995132736072', 10),
                    new BN('114724211733669380466013161478595696849361934083841165203349192857855320369780', 10),
                ),
                ec.point( // 13
                    new BN('43311438834212862187500559936376661121902598127232879413008819529023335905886', 10),
                    new BN('41350302337250006939627689924406448975530316247971453838164008940648008457894', 10),
                ),
                ec.point( // 14
                    new BN('93432529917424668222928221404536694810603297745777471489028353079347405861445', 10),
                    new BN('9362527584244171224146343491035595274624818606265561687487186533379238561673', 10),
                ),
                ec.point( // 15
                    new BN('71362737161104207059017095138570814691750514680088891190342554299373440389648', 10),
                    new BN('26987050350562434765388147053938941598193893288323933033995287417688970419007', 10),
                ),
                ec.point( // 16
                    new BN('51769821550004355550128768907181040522475624088411915625699409001060180515638', 10),
                    new BN('11084506084822946796951570030142208848302866478913801937944983121672566638737', 10),
                ),
                ec.point( // 17
                    new BN('71362737161104207059017095138570814691750514680088891190342554299373440389648', 10),
                    new BN('26987050350562434765388147053938941598193893288323933033995287417688970419007', 10),
                ),
                ec.point( // 18
                    new BN('37127254992355878013557366988599102492995773907987870319056087971434997653900', 10),
                    new BN('53394693853974634341207666138458169240020126249064830373669263883359031755487', 10),
                ),
                ec.point( // 19
                    new BN('7923914838715870615823255369696451710342737508741828919744787278655892893992', 10),
                    new BN('102881633696773641266926908516968637831143340589482785259812429780166861633434', 10),
                ),
                ec.point( // 20
                    new BN('83237824239728672568831563475278731604778606151926441821263391355402570111762', 10),
                    new BN('60977245426669213269121095870995040485375714624944921373453702050350540952247', 10),
                ),
            ],
        },
        {
            case: 'a special point',
            data: [
                ec.point( // 2
                    new BN('71362737161104207059017095138570814691750514680088891190342554299373440389648', 10),
                    new BN('26987050350562434765388147053938941598193893288323933033995287417688970419007', 10),
                ),
            ],
        },
        {
            case: 'an ordinary point',
            data: [
                ec.point( // 1
                    new BN('26838036379641624471722624288272916314709079812334638998876575380999511127393', 10),
                    new BN('32749959799081867363630234130170807009938706979625466307079975879756196691256', 10),
                ),
            ]
        }
    ])('Layer 4: Curve points to big numbers ($case)', ({data}) => {
        let there;
        let back;
        let ok = false;

        expect(() => {
            there = enc.steps.cryptoPointsToNumbers(data);
            back = enc.steps.numbersToCryptoPoints(there);
            ok = true;
        }).not.toThrow();

        if (ok) {
            expect(back.length).toEqual(data.length);

            _.forEach(
                _.zip(back, data),
                pair => {
                    const [actual, expected] = pair;
                    expect(actual.getX()).toEqual(expected.getX());
                    expect(actual.getY()).toEqual(expected.getY());
                }
            );
        }
    });

    test('Layer 5: Big numbers to base64 string', () => {
        const testData = [
            new BN('01010e227b5c6e20202020276d657373616765273a2027486572652077652067', 16),
            new BN('6f272c5c6e202020202761747461636865644d657373616765273a2027272c5c', 16),
            new BN('6e2020202027726573656e644d657373616765273a2027272c5c6e2020202027', 16),
            new BN('73656e646572273a202761727472316766326e70706773357976766a66783275', 16),
            new BN('657937343530707535347837396473647a37766833272c5c6e20202020277265', 16),
            new BN('63657069656e74273a202761727472316766326e70706773357976766a667832', 16),
            new BN('75657937343530707535347837396473647a37766833272c5c6e202020202773', 16),
            new BN('68614944273a2027736f6d652d6469676974732d68657265272c5c6e20202020', 16),
            new BN('2766726f6d55736572273a20315c6e7d22767da690cf601d153b1e560f6c1a94', 16),
        ];
        const there = enc.steps.numbersToMessage(testData);
        const back = enc.steps.messageToNumbers(there);
        _.forEach(
            _.zip(back, testData),
            pair => {
                const [actual, expected] = pair;
                expect(actual.toString()).toEqual(expected.toString());
            }
        );
    });

    test('All together', () => {
        const testData ="{'message': 'Here we go', 'attachedMessage': '', 'resendMessage': '', 'sender': 'artr1gf2nppgs5yvvjfx2uey7450pu54x79dsdz7vh3', 'recepient': 'artr1gf2nppgs5yvvjfx2uey7450pu54x79dsdz7vh3', 'shaID': 'some-digits-here','fromUser': 1}";
        const there = enc.encodeObject(pubKey, testData);
        const back = enc.decodeObject(privKey, there);
        expect(back).toEqual(testData);
    });

    describe('Layer combinations', () => {
        test('Layers 1 & 2', () => {
            const testData ="{'message': 'Here we go', 'attachedMessage': '', 'resendMessage': '', 'sender': 'artr1gf2nppgs5yvvjfx2uey7450pu54x79dsdz7vh3', 'recepient': 'artr1gf2nppgs5yvvjfx2uey7450pu54x79dsdz7vh3', 'shaID': 'some-digits-here','fromUser': 1}";
            const there1 = enc.steps.objToNumbers(testData);
            const there2 = enc.steps.numbersToRawPoints(there1);
            const back1 = enc.steps.rawPointsToNumbers(there2);
            const back2 = enc.steps.numbersToObj(back1);
            expect(back2).toEqual(testData);
        });

        test('Layers 2 & 3', () => {
            const testData = [
                new BN('01010e227b5c6e20202020276d657373616765273a2027486572652077652067', 16),
                new BN('6f272c5c6e202020202761747461636865644d657373616765273a2027272c5c', 16),
                new BN('6e2020202027726573656e644d657373616765273a2027272c5c6e2020202027', 16),
                new BN('73656e646572273a202761727472316766326e70706773357976766a66783275', 16),
                new BN('657937343530707535347837396473647a37766833272c5c6e20202020277265', 16),
                new BN('63657069656e74273a202761727472316766326e70706773357976766a667832', 16),
                new BN('75657937343530707535347837396473647a37766833272c5c6e202020202773', 16),
                new BN('68614944273a2027736f6d652d6469676974732d68657265272c5c6e20202020', 16),
                new BN('2766726f6d55736572273a20315c6e7d22767da690cf601d153b1e560f6c1a94', 16),
            ];
            const there1 = enc.steps.numbersToRawPoints(testData);
            const there2 = enc.steps.encryptPoints(pubKey, there1);
            const back1 = enc.steps.decryptPoints(privKey, there2);
            const back2 = enc.steps.rawPointsToNumbers(back1);
            expect(back2.length).toEqual(testData.length);
            _.forEach(
                _.zip(back2, testData),
                pair => {
                    const [actual, expected] = pair;
                    expect(actual.toString()).toEqual(expected.toString());
                }
            );
        });

        test('Layers 3 & 4', () => {
            const testData = [
                ec.point(
                    new BN('30092306940169112432727081005603551911369161731527605859873965648575921261168', 10),
                    new BN('52643133340401914516384882562227155928228786314711624904444804375619805996412', 10),
                ),
                ec.point(
                    new BN('56772156215815246076055628164834602596866052219349116834245437365976605708', 10),
                    new BN('97966660880691410730790271558030918969465737659510416818508419823826571557481', 10),
                ),
                ec.point(
                    new BN('33924621779903842732859115085362123253619473436262065166327830598369037402332', 10),
                    new BN('26098952447059234714940929403016438042770487821007189212890711186889180452310', 10),
                ),
                ec.point(
                    new BN('6284492424627605750578897533055669717408925188578101003924966133260521629067', 10),
                    new BN('61862545846336255500963184006460688749312037611054095279002047506371546627449', 10),
                ),
                ec.point(
                    new BN('30092306940169112432727081005603551911369161731527605859873965648575921261168', 10),
                    new BN('52643133340401914516384882562227155928228786314711624904444804375619805996412', 10),
                ),
                ec.point(
                    new BN('77622685039240840234141604906792502229032052087236981817848840501408946604638', 10),
                    new BN('8308901594903418977943452043103139702479631212297891637123611802720300076332', 10),
                ),
                ec.point(
                    new BN('105181253608806814769690378822282275856730961837698056570049270914056557675013', 10),
                    new BN('4709256775826008202037623530764257011778016670691675125638241646875326586741', 10),
                ),
                ec.point(
                    new BN('389149798220467363258246359300313033828587970631793646826664203868876849216', 10),
                    new BN('165427546966565080043119599988734897113115772514538543628531966636193293188', 10),
                ),
                ec.point(
                    new BN('26097595519697283265576377687560556490952289940768195599097705082173265811770', 10),
                    new BN('35816445956376762053916883309586044819568000080463579388512537901790126665149', 10),
                ),
                ec.point(
                    new BN('77622685039240840234141604906792502229032052087236981817848840501408946604638', 10),
                    new BN('8308901594903418977943452043103139702479631212297891637123611802720300076332', 10),
                ),
                ec.point(
                    new BN('5737220900664483516041840579113332320351673756513196558803418506249883676236', 10),
                    new BN('94338549691104146937096408816550699834658376902294399604353410536126302210313', 10),
                ),
                ec.point(
                    new BN('105181253608806814769690378822282275856730961837698056570049270914056557675013', 10),
                    new BN('4709256775826008202037623530764257011778016670691675125638241646875326586741', 10),
                ),
                ec.point(
                    new BN('33924621779903842732859115085362123253619473436262065166327830598369037402332', 10),
                    new BN('26098952447059234714940929403016438042770487821007189212890711186889180452310', 10),
                ),
                ec.point(
                    new BN('30092306940169112432727081005603551911369161731527605859873965648575921261168', 10),
                    new BN('52643133340401914516384882562227155928228786314711624904444804375619805996412', 10),
                ),
                ec.point(
                    new BN('351235932815259448008627518529335314515204411096210646831185097761542687984', 10),
                    new BN('40488678317756216706750484040069519561794433508784951040401746600588120704512', 10),
                ),
                ec.point(
                    new BN('30092306940169112432727081005603551911369161731527605859873965648575921261168', 10),
                    new BN('52643133340401914516384882562227155928228786314711624904444804375619805996412', 10),
                ),
                ec.point(
                    new BN('6637486429673491568694404282543648377634473435513697053265119471179607049454', 10),
                    new BN('17467473321181749581897740472994587871300239524678439323814406871281981202266', 10),
                ),
                ec.point(
                    new BN('23606213041416993804502508720553202481634366359530844384242697189474211729424', 10),
                    new BN('78473309552256222461260617563980060267676319986961412156878315930983687189298', 10),
                ),
                ec.point(
                    new BN('8910604649253295362273563235475880091627922603036661012385612840412814642506', 10),
                    new BN('68804639969537672055767033455221873491927403962421074147286515796811492001130', 10),
                ),
            ];

            const there1 = enc.steps.encryptPoints(pubKey, testData);
            const there2 = enc.steps.cryptoPointsToNumbers(there1);
            const back1 = enc.steps.numbersToCryptoPoints(there2);
            const back2 = enc.steps.decryptPoints(privKey, back1);

            expect(back2.length).toEqual(testData.length);
            _.forEach(
                _.zip(back2, testData),
                pair => {
                    const [actual, expected] = pair;
                    expect(actual.getX()).toEqual(expected.getX());
                    expect(actual.getY()).toEqual(expected.getY());
                }
            );
        });

        test('Layers 4 & 5', () => {
            const testData = [
                ec.point(
                    new BN('30092306940169112432727081005603551911369161731527605859873965648575921261168', 10),
                    new BN('52643133340401914516384882562227155928228786314711624904444804375619805996412', 10),
                ),
                ec.point(
                    new BN('56772156215815246076055628164834602596866052219349116834245437365976605708', 10),
                    new BN('97966660880691410730790271558030918969465737659510416818508419823826571557481', 10),
                ),
                ec.point(
                    new BN('33924621779903842732859115085362123253619473436262065166327830598369037402332', 10),
                    new BN('26098952447059234714940929403016438042770487821007189212890711186889180452310', 10),
                ),
                ec.point(
                    new BN('6284492424627605750578897533055669717408925188578101003924966133260521629067', 10),
                    new BN('61862545846336255500963184006460688749312037611054095279002047506371546627449', 10),
                ),
                ec.point(
                    new BN('30092306940169112432727081005603551911369161731527605859873965648575921261168', 10),
                    new BN('52643133340401914516384882562227155928228786314711624904444804375619805996412', 10),
                ),
                ec.point(
                    new BN('77622685039240840234141604906792502229032052087236981817848840501408946604638', 10),
                    new BN('8308901594903418977943452043103139702479631212297891637123611802720300076332', 10),
                ),
                ec.point(
                    new BN('105181253608806814769690378822282275856730961837698056570049270914056557675013', 10),
                    new BN('4709256775826008202037623530764257011778016670691675125638241646875326586741', 10),
                ),
                ec.point(
                    new BN('389149798220467363258246359300313033828587970631793646826664203868876849216', 10),
                    new BN('165427546966565080043119599988734897113115772514538543628531966636193293188', 10),
                ),
                ec.point(
                    new BN('26097595519697283265576377687560556490952289940768195599097705082173265811770', 10),
                    new BN('35816445956376762053916883309586044819568000080463579388512537901790126665149', 10),
                ),
                ec.point(
                    new BN('77622685039240840234141604906792502229032052087236981817848840501408946604638', 10),
                    new BN('8308901594903418977943452043103139702479631212297891637123611802720300076332', 10),
                ),
                ec.point(
                    new BN('5737220900664483516041840579113332320351673756513196558803418506249883676236', 10),
                    new BN('94338549691104146937096408816550699834658376902294399604353410536126302210313', 10),
                ),
                ec.point(
                    new BN('105181253608806814769690378822282275856730961837698056570049270914056557675013', 10),
                    new BN('4709256775826008202037623530764257011778016670691675125638241646875326586741', 10),
                ),
                ec.point(
                    new BN('33924621779903842732859115085362123253619473436262065166327830598369037402332', 10),
                    new BN('26098952447059234714940929403016438042770487821007189212890711186889180452310', 10),
                ),
                ec.point(
                    new BN('30092306940169112432727081005603551911369161731527605859873965648575921261168', 10),
                    new BN('52643133340401914516384882562227155928228786314711624904444804375619805996412', 10),
                ),
                ec.point(
                    new BN('351235932815259448008627518529335314515204411096210646831185097761542687984', 10),
                    new BN('40488678317756216706750484040069519561794433508784951040401746600588120704512', 10),
                ),
                ec.point(
                    new BN('30092306940169112432727081005603551911369161731527605859873965648575921261168', 10),
                    new BN('52643133340401914516384882562227155928228786314711624904444804375619805996412', 10),
                ),
                ec.point(
                    new BN('6637486429673491568694404282543648377634473435513697053265119471179607049454', 10),
                    new BN('17467473321181749581897740472994587871300239524678439323814406871281981202266', 10),
                ),
                ec.point(
                    new BN('23606213041416993804502508720553202481634366359530844384242697189474211729424', 10),
                    new BN('78473309552256222461260617563980060267676319986961412156878315930983687189298', 10),
                ),
                ec.point(
                    new BN('8910604649253295362273563235475880091627922603036661012385612840412814642506', 10),
                    new BN('68804639969537672055767033455221873491927403962421074147286515796811492001130', 10),
                ),
            ];

            const there1 = enc.steps.rawPointsToNumbers(testData);
            const there2 = enc.steps.numbersToMessage(there1);
            const back1 = enc.steps.messageToNumbers(there2);
            const back2 = enc.steps.numbersToRawPoints(back1);
            expect(back2.length).toEqual(testData.length);
            _.forEach(
                _.zip(back2, testData),
                pair => {
                    const [actual, expected] = pair;
                    expect(actual.getX()).toEqual(expected.getX());
                    expect(actual.getY()).toEqual(expected.getY());
                }
            );
        });
    });
});
